import React, { useState, useEffect } from 'react';
import './App.css';
import { useCovidData } from './hooks/useCovidData';
import GlobalOverview from './components/GlobalOverview';
import CountryDashboard from './components/CountryDashboard';
import GlobeVisualization from './components/GlobeVisualization';
import CountryModal from './components/CountryModal';
import CountryComparison from './components/CountryComparison';
import ComparisonModal from './components/ComparisonModal';
import DiseaseSelector, { Disease } from './components/DiseaseSelector';
import { Country } from './types';
import { whoApiService } from './services/whoApi';
import { flagService } from './services/flagService';

function App() {
  const { globalData: covidGlobalData, countries: covidCountries, selectedCountry: covidSelectedCountry, loading: covidLoading, fetchCountryHistory } = useCovidData();
  const [modalCountry, setModalCountry] = useState<Country | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [comparisonModalOpen, setComparisonModalOpen] = useState(false);
  const [selectedCountriesForComparison, setSelectedCountriesForComparison] = useState<string[]>([]);
  const [selectedDisease, setSelectedDisease] = useState<Disease | null>(null);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [diseaseData, setDiseaseData] = useState<{
    globalData: any;
    countries: Country[];
    selectedCountry: Country | null;
    loading: boolean;
  }>({
    globalData: null,
    countries: [],
    selectedCountry: null,
    loading: false
  });

  // Initialize flag service on app start
  useEffect(() => {
    flagService.initialize().catch(console.error);
  }, []);

  const handleCountryClick = (country: Country) => {
    setModalCountry(country);
    setIsModalOpen(true);
    if (country.countryInfo.iso2) {
      fetchCountryHistory(country.countryInfo.iso2);
    }
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setModalCountry(null);
  };

  const handleOpenComparison = (selectedCountries: string[]) => {
    setSelectedCountriesForComparison(selectedCountries);
    setComparisonModalOpen(true);
  };

  const closeComparisonModal = () => {
    setComparisonModalOpen(false);
    setSelectedCountriesForComparison([]);
  };

  const handleDiseaseSelect = async (disease: Disease) => {
    setSelectedDisease(disease);
    setDiseaseData(prev => ({ ...prev, loading: true }));

    if (disease.source === 'covid') {
      // Use existing COVID data
      setDiseaseData({
        globalData: covidGlobalData,
        countries: covidCountries,
        selectedCountry: covidSelectedCountry,
        loading: covidLoading
      });
    } else {
      try {
        // Fetch WHO data
        const whoRawData = await whoApiService.getDiseaseData(disease);
        const processedData = await whoApiService.processWHOData(whoRawData, disease);
        
        // Convert WHO data to Country format for globe visualization
        const whoCountries: Country[] = processedData.map(data => ({
          country: data.country,
          cases: data.cases,
          deaths: 0, // WHO data doesn't always include deaths
          recovered: 0, // WHO data doesn't always include recovered
          active: data.cases,
          critical: 0,
          casesPerOneMillion: 0,
          deathsPerOneMillion: 0,
          tests: 0,
          testsPerOneMillion: 0,
          population: 0,
          oneCasePerPeople: 0,
          oneDeathPerPeople: 0,
          oneTestPerPeople: 0,
          activePerOneMillion: 0,
          recoveredPerOneMillion: 0,
          criticalPerOneMillion: 0,
          countryInfo: {
            _id: 0,
            iso2: data.countryCode,
            iso3: data.countryCode,
            lat: data.lat,
            long: data.lng,
            flag: data.flag
          },
          updated: Date.now()
        }));

        // Calculate appropriate global metrics based on disease type
        let globalMetrics;
        const validData = processedData.filter(data => data.cases >= 0); // Changed from > 0 to >= 0
        
        if (disease.code === 'HIV_ARTCOVERAGE') {
          // For HIV coverage data (percentages), calculate meaningful averages
          const avgCoverage = validData.length > 0 ? 
            validData.reduce((sum, data) => sum + data.cases, 0) / validData.length : 0;
          const maxCoverage = validData.length > 0 ? 
            Math.max(...validData.map(data => data.cases)) : 0;
          const minCoverage = validData.length > 0 ? 
            Math.min(...validData.map(data => data.cases)) : 0;
            
          globalMetrics = {
            cases: Math.round(avgCoverage), // Average coverage percentage
            deaths: Math.round(maxCoverage), // Highest coverage
            recovered: Math.round(minCoverage), // Lowest coverage
            active: validData.length, // Countries with data
            critical: 0,
            casesPerOneMillion: 0,
            deathsPerOneMillion: 0,
            tests: 0,
            testsPerOneMillion: 0,
            population: 0,
            oneCasePerPeople: 0,
            oneDeathPerPeople: 0,
            oneTestPerPeople: 0,
            activePerOneMillion: 0,
            recoveredPerOneMillion: 0,
            criticalPerOneMillion: 0,
            updated: Date.now(),
            affectedCountries: validData.length
          };
        } else if (disease.code.startsWith('MENING_') || disease.code.startsWith('TB_') || 
                   disease.code.startsWith('WHS4_') || disease.code.startsWith('MALARIA')) {
          // For case count data, sum the totals
          const totalCases = validData.reduce((sum, data) => sum + data.cases, 0);
          
          globalMetrics = {
            cases: totalCases,
            deaths: 0,
            recovered: 0,
            active: totalCases,
            critical: 0,
            casesPerOneMillion: 0,
            deathsPerOneMillion: 0,
            tests: 0,
            testsPerOneMillion: 0,
            population: 0,
            oneCasePerPeople: 0,
            oneDeathPerPeople: 0,
            oneTestPerPeople: 0,
            activePerOneMillion: 0,
            recoveredPerOneMillion: 0,
            criticalPerOneMillion: 0,
            updated: Date.now(),
            affectedCountries: validData.length
          };
        } else {
          // Default handling for other data types
          globalMetrics = {
            cases: validData.reduce((sum, data) => sum + data.cases, 0),
            deaths: 0,
            recovered: 0,
            active: validData.reduce((sum, data) => sum + data.cases, 0),
            critical: 0,
            casesPerOneMillion: 0,
            deathsPerOneMillion: 0,
            tests: 0,
            testsPerOneMillion: 0,
            population: 0,
            oneCasePerPeople: 0,
            oneDeathPerPeople: 0,
            oneTestPerPeople: 0,
            activePerOneMillion: 0,
            recoveredPerOneMillion: 0,
            criticalPerOneMillion: 0,
            updated: Date.now(),
            affectedCountries: validData.length
          };
        }

        setDiseaseData({
          globalData: globalMetrics,
          countries: whoCountries,
          selectedCountry: null,
          loading: false
        });
      } catch (error) {
        console.error('Error fetching disease data:', error);
        setDiseaseData({
          globalData: null,
          countries: [],
          selectedCountry: null,
          loading: false
        });
      }
    }
  };

  const toggleMobileMenu = () => {
    setMobileMenuOpen(!mobileMenuOpen);
  };

  const currentData = selectedDisease ? diseaseData : {
    globalData: covidGlobalData,
    countries: covidCountries,
    loading: covidLoading
  };

  return (
    <div className="app">
      {/* Modern Header */}
      <header className={`app-header ${(isModalOpen || comparisonModalOpen) ? 'dimmed' : ''}`}>
        <h1 className="app-title">
          üåç Global Disease Tracker
        </h1>
        
        {selectedDisease && currentData.globalData && (
          <div className="header-stats fade-in">
            <div className="stat-item">
              <div className="stat-value">
                {selectedDisease.code === 'HIV_ARTCOVERAGE' 
                  ? `${currentData.globalData.cases}%`
                  : currentData.globalData.cases.toLocaleString()
                }
              </div>
              <div className="stat-label">
                {selectedDisease.code === 'HIV_ARTCOVERAGE' ? 'Avg Coverage' : 'Total Cases'}
              </div>
            </div>
            <div className="stat-item">
              <div className="stat-value">{currentData.globalData.affectedCountries}</div>
              <div className="stat-label">Countries</div>
            </div>
            <div className="stat-item">
              <div className="stat-value">{selectedDisease.name}</div>
              <div className="stat-label">Disease</div>
            </div>
          </div>
        )}
      </header>
      <main className="container">
        {!selectedDisease ? (
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            height: '60vh',
            flexDirection: 'column',
            gap: '1rem'
          }}>
            <div style={{
              fontSize: '4rem',
              opacity: 0.3
            }}>üåç</div>
            <h2 style={{
              color: '#94a3b8',
              fontSize: '1.5rem',
              fontWeight: '400',
              margin: 0
            }}>
              Select a disease to begin tracking
            </h2>
            <p style={{
              color: '#64748b',
              fontSize: '1rem',
              margin: 0,
              textAlign: 'center'
            }}>
              Choose a disease from the dropdown menu above to visualize global health data
            </p>
          </div>
        ) : (
          <>
            <div className="top-panels">
              <div className="global-overview-panel">
                <GlobalOverview globalData={diseaseData.globalData} selectedDisease={selectedDisease} />
              </div>
              <div className="country-dashboard-panel">
                <CountryDashboard country={diseaseData.selectedCountry} />
              </div>
              <div className="country-comparison-panel">
                <CountryComparison countries={diseaseData.countries} onOpenComparison={handleOpenComparison} />
              </div>
            </div>
            <div className="main-content">
              <GlobeVisualization countries={diseaseData.countries} onCountryClick={handleCountryClick} />
            </div>
          </>
        )}
      </main>
      <CountryModal 
        country={modalCountry} 
        isOpen={isModalOpen} 
        onClose={closeModal} 
      />
      <ComparisonModal
        isOpen={comparisonModalOpen}
        onClose={closeComparisonModal}
        selectedCountries={selectedCountriesForComparison}
        countries={diseaseData.countries}
      />
    </div>
  );
}

export default App;